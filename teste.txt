import { useEffect, useState, useCallback, useRef } from "react";
import { Select } from "@/components/web-cross";
import { SearchArea } from "./styles";
import { useOperatorStore } from "@/presentation/store/use-operator-store";
import { useCurrentAccountStore } from "login_app/useCurrentAccountStore";

interface Option {
  value: string;
  id: string;
}

const SearchFilter = () => {
  const useAuthStore = useCurrentAccountStore();
  const { setFilterOptions, filterOptions, userDetails } = useOperatorStore();
  
  const [companies, setCompanies] = useState<Option[]>([]);
  const [accounts, setAccounts] = useState<Option[]>([]);
  const [agencys, setAgencys] = useState<Option[]>([]);
  
  const [selectedCompanie, setSelectedCompanie] = useState<string>("");
  const [selectedAccountNumber, setSelectedAccountNumber] = useState<string>("");
  const [selectedAgency, setSelectedAgency] = useState<string>("");
  const isInitialized = useRef(false);

  // Memoizar a função para carregar todas as opções
  const loadAllOptions = useCallback(() => {
    if (!userDetails?.accounts) return;

    // Extrair todas as empresas
    const allCompanies = userDetails.accounts.map((item: any) => ({
      id: item.company.cnpj,
      value: item.company.name,
    }));

    // Extrair todas as contas
    const allAccounts = userDetails.accounts.map((item: any) => ({
      id: item.company.accountNumber,
      value: item.company.accountNumber,
    }));

    // Extrair todas as agências
    const allAgencies = userDetails.accounts.map((item: any) => ({
      id: item.company.agency,
      value: item.company.agency,
    }));

    // Remover duplicados
    const uniqueCompanies = allCompanies.filter((comp, index, self) =>
      index === self.findIndex((c) => c.id === comp.id)
    );

    const uniqueAccounts = allAccounts.filter((acc, index, self) =>
      index === self.findIndex((a) => a.id === acc.id)
    );

    const uniqueAgencies = allAgencies.filter((agency, index, self) =>
      index === self.findIndex((a) => a.id === agency.id)
    );

    // Adicionar opções vazias
    const companiesWithEmpty = [{ id: "", value: "Selecione uma empresa" }, ...uniqueCompanies];
    const accountsWithEmpty = [{ id: "", value: "Selecione uma conta" }, ...uniqueAccounts];
    const agenciesWithEmpty = [{ id: "", value: "Selecione uma agência" }, ...uniqueAgencies];

    setCompanies(companiesWithEmpty);
    setAccounts(accountsWithEmpty);
    setAgencys(agenciesWithEmpty);
  }, [userDetails]);

  // Memoizar a função de filtro por empresa
  const filterByCompany = useCallback((companyId: string) => {
    if (!userDetails?.accounts) return;

    // Se não houver empresa selecionada, mostrar tudo
    if (!companyId) {
      setSelectedCompanie("");
      loadAllOptions();
      return;
    }

    setSelectedCompanie(companyId);

    // Filtrar agências e contas da empresa selecionada
    const filteredItems = userDetails.accounts.filter(
      (item: any) => item.company.cnpj === companyId
    );

    // Extrair agências e contas
    const filteredAgencies = filteredItems.map((item: any) => ({
      id: item.company.agency,
      value: item.company.agency,
    }));

    const filteredAccounts = filteredItems.map((item: any) => ({
      id: item.company.accountNumber,
      value: item.company.accountNumber,
    }));

    // Remover duplicados
    const uniqueAgencies = filteredAgencies.filter((agency, index, self) =>
      index === self.findIndex((a) => a.id === agency.id)
    );

    const uniqueAccounts = filteredAccounts.filter((acc, index, self) =>
      index === self.findIndex((a) => a.id === acc.id)
    );

    // Adicionar opções vazias
    const agenciesWithEmpty = [{ id: "", value: "Selecione uma agência" }, ...uniqueAgencies];
    const accountsWithEmpty = [{ id: "", value: "Selecione uma conta" }, ...uniqueAccounts];

    // Limpar seleções de agência e conta se não forem compatíveis
    const isAgencyCompatible = uniqueAgencies.some(agency => agency.id === selectedAgency);
    const isAccountCompatible = uniqueAccounts.some(acc => acc.id === selectedAccountNumber);

    if (!isAgencyCompatible) setSelectedAgency("");
    if (!isAccountCompatible) setSelectedAccountNumber("");

    // Atualizar selects
    setAgencys(agenciesWithEmpty);
    setAccounts(accountsWithEmpty);

    // Atualizar filtros
    updateFilters(companyId, isAgencyCompatible ? selectedAgency : "", isAccountCompatible ? selectedAccountNumber : "");
  }, [userDetails, selectedAgency, selectedAccountNumber, loadAllOptions]);

  // Memoizar a função de filtro por agência
  const filterByAgency = useCallback((agencyId: string) => {
    if (!userDetails?.accounts) return;

    // Se não houver agência selecionada, mostrar tudo ou filtrar por empresa
    if (!agencyId) {
      setSelectedAgency("");
      if (selectedCompanie) {
        filterByCompany(selectedCompanie);
      } else {
        loadAllOptions();
      }
      return;
    }

    setSelectedAgency(agencyId);

    // Filtrar empresas e contas pela agência selecionada
    const filteredItems = userDetails.accounts.filter(
      (item: any) => item.company.agency === agencyId
    );

    // Se não estamos filtrando também por empresa
    if (!selectedCompanie) {
      // Extrair empresas
      const filteredCompanies = filteredItems.map((item: any) => ({
        id: item.company.cnpj,
        value: item.company.name,
      }));

      // Remover duplicados
      const uniqueCompanies = filteredCompanies.filter((company, index, self) =>
        index === self.findIndex((c) => c.id === company.id)
      );

      // Adicionar opções vazias
      const companiesWithEmpty = [{ id: "", value: "Selecione uma empresa" }, ...uniqueCompanies];
      setCompanies(companiesWithEmpty);
    }

    // Extrair contas
    const filteredAccounts = filteredItems.map((item: any) => ({
      id: item.company.accountNumber,
      value: item.company.accountNumber,
    }));

    // Remover duplicados
    const uniqueAccounts = filteredAccounts.filter((acc, index, self) =>
      index === self.findIndex((a) => a.id === acc.id)
    );

    // Adicionar opções vazias
    const accountsWithEmpty = [{ id: "", value: "Selecione uma conta" }, ...uniqueAccounts];

    // Verificar compatibilidade da conta
    const isAccountCompatible = uniqueAccounts.some(acc => acc.id === selectedAccountNumber);
    if (!isAccountCompatible) setSelectedAccountNumber("");

    // Atualizar selects
    setAccounts(accountsWithEmpty);

    // Atualizar filtros
    updateFilters(selectedCompanie, agencyId, isAccountCompatible ? selectedAccountNumber : "");
  }, [userDetails, selectedCompanie, selectedAccountNumber, filterByCompany, loadAllOptions]);

  // Memoizar a função de filtro por conta
  const filterByAccount = useCallback((accountId: string) => {
    if (!userDetails?.accounts) return;

    // Se não houver conta selecionada, mostrar tudo ou filtrar por empresa/agência
    if (!accountId) {
      setSelectedAccountNumber("");
      if (selectedCompanie || selectedAgency) {
        // Manter os filtros existentes
        updateFilters(selectedCompanie, selectedAgency, "");
      } else {
        loadAllOptions();
      }
      return;
    }

    setSelectedAccountNumber(accountId);
    updateFilters(selectedCompanie, selectedAgency, accountId);
  }, [userDetails, selectedCompanie, selectedAgency, loadAllOptions]);

  // Memoizar a função para atualizar filtros
  const updateFilters = useCallback((company: string, agency: string, account: string) => {
    setFilterOptions({
      ...filterOptions,
      accountNumber: account || "",
      cnpj: company || "",
      agency: agency ? Number(agency) : undefined,
    });
  }, [filterOptions, setFilterOptions]);

  // Efeito único para inicialização
  useEffect(() => {
    // Se já inicializamos ou não temos dados, retornar
    if (isInitialized.current || !userDetails?.accounts) return;

    // Carregar todas as opções
    loadAllOptions();

    // Buscar os dados do usuário atual
    const currentAccount = useAuthStore?.currentCompanyAccount?.accountDetail;
    if (!currentAccount) {
      isInitialized.current = true;
      return;
    }

    const currentCompanyCnpj = currentAccount.company?.cnpj;
    const currentAgency = currentAccount.agency;
    const currentAccountNumber = currentAccount.accountNumber;

    // Se não temos pelo menos a empresa, não podemos inicializar
    if (!currentCompanyCnpj) {
      isInitialized.current = true;
      return;
    }

    // Definir os valores iniciais e disparar a filtragem
    setTimeout(() => {
      // Primeiro, atualizamos os estados diretamente para evitar múltiplas renderizações
      setSelectedCompanie(currentCompanyCnpj);
      
      if (currentAgency) {
        setSelectedAgency(currentAgency);
      }
      
      if (currentAccountNumber) {
        setSelectedAccountNumber(currentAccountNumber);
      }
      
      // Agora filtramos para atualizar as opções disponíveis
      filterByCompany(currentCompanyCnpj);
      
      // Marcar como inicializado
      isInitialized.current = true;
      
      console.log("Inicialização completa:", {
        empresa: currentCompanyCnpj,
        agencia: currentAgency,
        conta: currentAccountNumber
      });
    }, 0);
  }, [userDetails, useAuthStore?.currentCompanyAccount, loadAllOptions, filterByCompany]);

  return (
    <SearchArea>
      <Select
        behavior="regular"
        errorDescription="Campo inválido."
        label="Empresa"
        onSelect={filterByCompany}
        options={companies}
        variant="medium"
        value={selectedCompanie || ""}
      />
      <Select
        behavior="regular"
        errorDescription="Campo inválido."
        label="Agência"
        onSelect={filterByAgency}
        options={agencys}
        variant="medium"
        value={selectedAgency || ""}
      />
      <Select
        behavior="regular"
        errorDescription="Campo inválido."
        label="Conta"
        onSelect={filterByAccount}
        options={accounts}
        variant="medium"
        value={selectedAccountNumber || ""}
      />
    </SearchArea>
  );
};

export default SearchFilter;